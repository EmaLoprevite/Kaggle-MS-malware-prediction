#!/usr/bin/env python
# coding: utf-8

# In[1]:


NB = "PREDICTION"


# In[2]:


get_ipython().run_line_magic('run', 'common.ipynb')


# In[3]:


logging.info("Load pipeline pickle")
pipeline = pickle.load(open(PIPELINE_PKL, 'rb'))


# In[4]:


logging.info("Pipeline transform")
t0 = time.perf_counter()
ds_final = pipeline.transform(ds)
t1 = time.perf_counter()
t_pipe_t = t1 - t0
logging.info("Pipeline transform, time: %s seconds", t_pipe_t)
t_pipe_t


# In[5]:


del ds

logging.info("Transformed data set shape: %s", ds_final.shape)
ds_final.shape


# In[6]:


logging.info("Load model pickle")
model = pickle.load(open(MODEL_PKL, 'rb'))


# In[7]:


logging.info("Predict probabilities")
t0 = time.perf_counter()
predictions = model.predict_proba(ds_final)
t1 = time.perf_counter()
t_pp = t1 - t0
logging.info("Predict probabilities, time: %s seconds", t_pp)
t_pp


# In[8]:


predictions


# In[9]:


df['HasDetections'] = predictions[:, 1]

df


# In[10]:


logging.info("Write predictions in a CSV file")
submission_csv = os.path.join(
    CSV_PATH,
    "submission-{}_{}.csv".format(ROUND, MODEL_NAME)
)
t0 = time.perf_counter()
df.to_csv(submission_csv, index=False)
t1 = time.perf_counter()
t_write = t1 - t0
logging.info("Write predictions in a CSV file, time: %s seconds", t_write)
t_write


# In[11]:


# save times in a csv file
step_names = ["t_load", "t_pipe_t", "t_pp", "t_write"]
times_list = [t_load, t_pipe_t, t_pp, t_write]
times_dict = {'step': step_names, 'time': times_list}
times_df = pd.DataFrame(times_dict)

logging.info("Write prediction times in a CSV file")
times_csv = os.path.join(
    CSV_PATH,
    "times_prediction-{}_{}.csv".format(ROUND, MODEL_NAME)
)
times_df.to_csv(times_csv, index=False)


# In[12]:


logging.info("FINISHED %s --- %s, %s", NB, ROUND, MODEL_NAME)

